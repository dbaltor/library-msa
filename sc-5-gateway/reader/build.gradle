buildscript {
	ext { 
        verifierVersion = '3.1.1'
	}
	repositories { 
		mavenCentral()
	}
	dependencies { 
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${verifierVersion}"
        // PACT dependencies
		classpath "org.springframework.cloud:spring-cloud-contract-pact:${verifierVersion}"
	}
}

group = 'online.dbaltor'

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply plugin: 'spring-cloud-contract'

application {
    mainClassName = 'reader.ReaderApplication'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		// required by spring-cloud-services-starter-*
		mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${cloudServicesDependencies}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    //implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    // https://mvnrepository.com/artifact/io.rest-assured/spring-mock-mvc
	testImplementation 'io.rest-assured:spring-mock-mvc:4.3.0'
    // includes com.sun.xml.bind:jaxb-osgi used by spring-mock-mvc
	testImplementation 'io.rest-assured:xml-path:4.2.0'

	//Required to connect to PCF Service Registry.
	implementation 'io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry'
	//implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'io.github.openfeign:feign-okhttp'
	implementation 'io.github.resilience4j:resilience4j-spring-boot2'
        //implementation("io.github.resilience4j:resilience4j-all:${resilience4jVersion}") 
	// required due to https://github.com/resilience4j/resilience4j/issues/1151
	implementation 'io.github.resilience4j:resilience4j-circuitbreaker'
	implementation 'io.github.resilience4j:resilience4j-timelimiter'
	//implementation 'org.springframework.boot:spring-boot-starter-aop' // required by resilience4j
	////implementation "io.micrometer:micrometer-registry-prometheus" // may be used by resilience4j"
	
	//Required to connect to PCF Config Server. It includes 
	//Spring Cloud Config Client
	//Spring Security OAuth2
	implementation 'io.pivotal.spring.cloud:spring-cloud-services-starter-config-client'
	//implementation 'org.springframework.cloud:spring-cloud-starter-config'
	//2020.0 Bootstrap, provided by spring-cloud-commons, is no longer enabled by default. 
	//https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes#breaking-changes
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	test {
  		useJUnitPlatform()
	}
	testImplementation 'junit:junit:4.13'
	testImplementation 'org.hamcrest:hamcrest:2.2'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //implementation 'com.github.javafaker:javafaker:1.0.2'
	// https://github.com/DiUS/java-faker/issues/327
	implementation ('com.github.javafaker:javafaker:1.0.2') { exclude module: 'org.yaml' }
	implementation group: 'org.yaml', name: 'snakeyaml', version: '1.26'

    runtimeOnly 'com.h2database:h2'
}

contracts {
        baseClassForTests = 'reader.ReaderBase' // fallback base class
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact bootJar
			artifact verifierStubsJar

			// https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/273
			versionMapping {
				usage("java-api") {
					fromResolutionOf("runtimeClasspath")
				}
				usage("java-runtime") {
					fromResolutionResult()
				}
			}
		}
	}
}
